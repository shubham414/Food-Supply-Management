/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CommonLoginPage;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Food.Food;
import Business.Order.MasterOrderCatalog;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.Organization;
import Business.Supplier.Supplier;
import Business.UserAccount.UserAccount;
import UserInterface.FoodMinisterRole.FoodMinisterRequestFoodJPanel;

import UserInterface.NGOVolunteer.NGOVolunteerJPanel;

import java.awt.CardLayout;
import java.awt.Component;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author
 */
public class RequestForFoodJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestForFoodJPanel
     */
    private JPanel container;
    private UserAccount ua;
    private Organization org;
    private Enterprise enterprise;
    private EcoSystem system;
    private Order o;
    private Food food;
    private String ngoFood;
    private Boolean isCheckout = false;
    private MasterOrderCatalog moc;
    private Map<String, Integer> ngoAvailQuant;

    public RequestForFoodJPanel(JPanel container, UserAccount ua, Organization org, Enterprise enterprise, EcoSystem system, Map<String, Integer> ngoAvailQuant) {
        initComponents();
        this.container = container;
        this.ua = ua;
        this.org = org;
        this.enterprise = enterprise;
        this.system = system;
        this.ngoAvailQuant = ngoAvailQuant;
        lblUserName.setText(ua.getEmployee().getName());
        populateFoodType();
        populateFoodTable();

        lblUserName.setText(this.ua.getEmployee().getName());
        if (!isCheckout) {
            o = new Order();
        }
    }

    public void populateFoodType() {
        jcbFoodType.removeAllItems();
        for (Food.FoodType type : Food.FoodType.values()) {
            jcbFoodType.addItem(type);
        }
    }

    public void populateTable(Food.FoodType type) {
        DefaultTableModel model = (DefaultTableModel) tblFoodCatalog.getModel();
        model.setRowCount(0);

        for (Supplier s : system.getSupplierCatalog().getSupplierList()) {
            for (Food m : s.getFoodList().getFoodCatalog()) {
                if (m.getType().equalsIgnoreCase(type.getValue())) {
                    Object[] row = new Object[4];
                    row[0] = m;
                    row[1] = m.getCode();
                    row[2] = m.getQuantity();

                    model.addRow(row);
                }
            }
        }
    }

    public void populateFoodTable() {

        DefaultTableModel model = (DefaultTableModel) tblFoodCatalog.getModel();
        model.setRowCount(0);

        for (Supplier s : system.getSupplierCatalog().getSupplierList()) {
            for (Food m : s.getFoodList().getFoodCatalog()) {
                Object[] row = new Object[4];
                row[0] = m;
                row[1] = m.getCode();
                row[2] = m.getQuantity();

                model.addRow(row);
            }
        }
    }

    public void populateOrder() {
        DecimalFormat df = new DecimalFormat("#.00");
        DefaultTableModel dtm = (DefaultTableModel) tblAddedtoCart.getModel();
        dtm.setRowCount(0);
        for (OrderItem oi : o.getOrderItemList()) {
            Object row[] = new Object[8];
            row[0] = oi;
            row[1] = oi.getFood().getCode();
            row[2] = oi.getOrderItemQuantity();

            Date oDate = new Date();
            DateFormat oDateFormat = new SimpleDateFormat("MM-dd-yyyy");
            String szDate = oDateFormat.format(oDate);
            row[3] = szDate;

            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        btnAdtoCart = new javax.swing.JButton();
        lblFoodDetails = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jSpinnerQty = new javax.swing.JSpinner();
        lblUserName = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFoodCatalog = new javax.swing.JTable();
        lblFoodCategory = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAddedtoCart = new javax.swing.JTable();
        jcbFoodType = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 204, 102));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Microsoft JhengHei", 1, 24)); // NOI18N
        jLabel6.setText("Activity:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 110, 30));

        btnAdtoCart.setBackground(new java.awt.Color(102, 102, 102));
        btnAdtoCart.setForeground(new java.awt.Color(255, 255, 255));
        btnAdtoCart.setText("Add to Cart");
        btnAdtoCart.setMaximumSize(new java.awt.Dimension(200, 200));
        btnAdtoCart.setMinimumSize(new java.awt.Dimension(200, 200));
        btnAdtoCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdtoCartActionPerformed(evt);
            }
        });
        add(btnAdtoCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 370, 180, 30));

        lblFoodDetails.setFont(new java.awt.Font("Microsoft JhengHei", 0, 24)); // NOI18N
        lblFoodDetails.setText("Food Details");
        add(lblFoodDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 160, 30));

        btnBack.setBackground(new java.awt.Color(102, 102, 102));
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<<");
        btnBack.setMaximumSize(new java.awt.Dimension(200, 200));
        btnBack.setMinimumSize(new java.awt.Dimension(200, 200));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 240, -1, 39));

        jLabel11.setFont(new java.awt.Font("Microsoft JhengHei", 0, 14)); // NOI18N
        jLabel11.setText("Select Quantity:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 370, 150, 30));

        jSpinnerQty.setFont(new java.awt.Font("Microsoft JhengHei", 0, 14)); // NOI18N
        jSpinnerQty.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jSpinnerQty.setValue(1);
        add(jSpinnerQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 370, 48, 30));

        lblUserName.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        lblUserName.setText("*user Details");
        add(lblUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 130, 40));

        jLabel9.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel9.setText("User:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 80, 40));

        tblFoodCatalog.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        tblFoodCatalog.setForeground(new java.awt.Color(102, 0, 102));
        tblFoodCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Food", "Code", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFoodCatalog);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 180, 770, 160));

        lblFoodCategory.setFont(new java.awt.Font("Microsoft JhengHei", 0, 14)); // NOI18N
        lblFoodCategory.setText("Food Catagory :");
        add(lblFoodCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 90, 120, 40));

        btnRemove.setBackground(new java.awt.Color(102, 102, 102));
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("Remove Item");
        btnRemove.setMaximumSize(new java.awt.Dimension(200, 200));
        btnRemove.setMinimumSize(new java.awt.Dimension(200, 200));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 560, 177, 30));

        btnCheckout.setBackground(new java.awt.Color(102, 102, 102));
        btnCheckout.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckout.setText("Checkout");
        btnCheckout.setMaximumSize(new java.awt.Dimension(200, 200));
        btnCheckout.setMinimumSize(new java.awt.Dimension(200, 200));
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });
        add(btnCheckout, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 560, 180, 30));

        tblAddedtoCart.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        tblAddedtoCart.setForeground(new java.awt.Color(102, 0, 102));
        tblAddedtoCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Food", "Code", "Quantity", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAddedtoCart);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 430, 1030, 110));

        jcbFoodType.setFont(new java.awt.Font("Microsoft JhengHei", 0, 14)); // NOI18N
        jcbFoodType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFoodType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFoodTypeActionPerformed(evt);
            }
        });
        add(jcbFoodType, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 100, 178, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdtoCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdtoCartActionPerformed
        // TODO add your handling code here:
        // btnViewDetails.setEnabled(true);

//        String s = JOptionPane.showInputDialog("Which Food are you requesting for");
//       if(ngoAvailQuant.keySet().contains(s) && ngoAvailQuant.get(s) > 100){
//            System.out.println(ngoAvailQuant.get(s));
//          
//           JOptionPane.showMessageDialog(null,"Sorry !! You cannot order for this food item at this time.\n You already have more than 100 quantity for this food item.\n Kindly distribute it first then order.  \n This measure has been taken to avoid food wastage \n Kindly Collaborate\n Thank You.","Attention",JOptionPane.INFORMATION_MESSAGE);
//      }
        int selectedRow = tblFoodCatalog.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            ngoFood = tblFoodCatalog.getValueAt(selectedRow, 0).toString();
            food = (Food) tblFoodCatalog.getValueAt(selectedRow, 0);

            if (ngoAvailQuant.keySet().contains(ngoFood) && ngoAvailQuant.get(ngoFood) > 100) {
                System.out.println(ngoAvailQuant.get(ngoFood));

                JOptionPane.showMessageDialog(null, "Sorry !! You cannot order for this food item at this time.\n You already have more than 100 quantity for this food item.\n Kindly distribute it first then order.  \n This measure has been taken to avoid food wastage \n Kindly Collaborate\n Thank You.", "Attention", JOptionPane.INFORMATION_MESSAGE);
            } else {
                int fetchQty = (Integer) jSpinnerQty.getValue();

                if (fetchQty <= food.getQuantity()) {
                    DecimalFormat df = new DecimalFormat("#.00");

                    boolean alreadyPresent = false;

                    for (OrderItem oi : o.getOrderItemList()) {
                        if (oi.getFood() == food) {

                            int oldAvail = food.getQuantity();
                            int newAvail = oldAvail - fetchQty;
                            food.setQuantity(newAvail);
                            oi.setOrderItemQuantity(fetchQty + oi.getOrderItemQuantity());

                            alreadyPresent = true;

                            populateOrder();
                            populateFoodTable();
                            break;
                        }
                    }
                    if (!alreadyPresent) {
                        int oldAvail = food.getQuantity();
                        int newavail = oldAvail - fetchQty;
                        food.setQuantity(newavail);

                        OrderItem orderItem = o.addOrderItem();
                        orderItem.setFood(food);
                        orderItem.setOrderItemQuantity(fetchQty);
                        orderItem.setdOfPurchase(food.getDateOfPurchaseInString());

                        populateFoodTable();
                        populateOrder();
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Quantity must not be greater than Available items", "Warning", JOptionPane.WARNING_MESSAGE);
                }

            }
        }

    }//GEN-LAST:event_btnAdtoCartActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        if (ua.getRole().toString().equals("Doctor")) {
            container.remove(this);
            Component[] componentArray = container.getComponents();
            Component component = componentArray[componentArray.length - 1];
            FoodMinisterRequestFoodJPanel dwjp = (FoodMinisterRequestFoodJPanel) component;
            dwjp.populateRequestTable();
            CardLayout layout = (CardLayout) container.getLayout();
            layout.previous(container);
        }

        if (ua.getRole().toString().equals("Volunteer")) {
            container.remove(this);
            Component[] componentArray = container.getComponents();
            Component component = componentArray[componentArray.length - 1];
            NGOVolunteerJPanel nvjp = (NGOVolunteerJPanel) component;
            nvjp.populateRequestTable();
            CardLayout layout = (CardLayout) container.getLayout();
            layout.previous(container);
        }


    }//GEN-LAST:event_btnBackActionPerformed


    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int row = tblAddedtoCart.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            OrderItem oi = (OrderItem) tblAddedtoCart.getValueAt(row, 0);
            int oldAvail = oi.getFood().getQuantity();
            int oldQty = oi.getOrderItemQuantity();
            int newQty = oldQty + oldAvail;
            oi.getFood().setQuantity(newQty);
            o.removeOrderItem(oi);
            JOptionPane.showMessageDialog(null, "OrderItem removed from the Cart");
        }
        populateOrder();
        populateFoodTable();

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        if (o.getOrderItemList().size() > 0) {
            moc = system.getMasterOrderCatalog();
            moc.addOrder(o);

            o.setUa(ua);
            populateOrder();
            isCheckout = true;
            CheckOutJPanel checkOutJPanel = new CheckOutJPanel(container, ua, org, o, system);
            container.add("CheckOut JPanel", checkOutJPanel);
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);

            o = new Order();

        } else {
            JOptionPane.showMessageDialog(null, "Cart is empty!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckoutActionPerformed


    private void jcbFoodTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFoodTypeActionPerformed
        // TODO add your handling code here:
        Food.FoodType type = (Food.FoodType) jcbFoodType.getSelectedItem();
        if (type != null) {
            populateTable(type);
        }
    }//GEN-LAST:event_jcbFoodTypeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdtoCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerQty;
    private javax.swing.JComboBox jcbFoodType;
    private javax.swing.JLabel lblFoodCategory;
    private javax.swing.JLabel lblFoodDetails;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTable tblAddedtoCart;
    private javax.swing.JTable tblFoodCatalog;
    // End of variables declaration//GEN-END:variables
}
